""" Estruturando uma aplica√ß√£o
M√≥dulos
Um m√≥dulo √© um arquivo que cont√©m defini√ß√µes e instru√ß√µes em Python. O nome do arquivo √© um nome acrescido de .py . Dentro de um outro arquivo python, voc√™ pode importar um m√≥dulo e ter acesso √†s suas fun√ß√µes, classes, etc.
Em linhas gerais, todo arquivo que √© escrito com a linguagem Python e com a extens√£o .py √© considerado um m√≥dulo.
Observe o arquivo my_math.py abaixo:
"""

def sum(a, b):
  return a + b


def pot(a, b):
  return a ** b


print(sum(2, 2))
print(pot(2, 3))

""" Este arquivo √© um m√≥dulo Python, que pode ser executado como script, com o comando python3 my_math.py . Se isso ocorrer, o retorno ser√°, em ordem, 4 e 8, devido √†s chamadas das fun√ß√µes dentro dos m√©todos print() .
Entretanto as fun√ß√µes que criamos neste arquivo podem ser reaproveitadas por outros m√≥dulos, atrav√©s da declara√ß√£o import .
√Ä medida que fomos avan√ßando, esses conceitos ficar√£o cada vez mais claros.
Pacotes üì¶
Pacotes s√£o m√≥dulos Python que cont√™m outros m√≥dulos e/ou pacotes , comumente separados por responsabilidades similares. Na pr√°tica, um pacote √© um diret√≥rio que pode conter v√°rios m√≥dulos (arquivos de extens√£o .py ) e/ou outros pacotes .
Exemplo de tipos diferentes de imports de pacotes : """

import http  # importa o pacote http como um m√≥dulo

from http import client  # importa o m√≥dulo client do pacote http

from http.client import HTTP_PORT  # importa a constante HTTP_POST do m√≥dulo client do pacote http

""" Tudo isso ficar√° mais percept√≠vel, √† medida que formos avan√ßando no conte√∫do.

Ambiente Virtual
Imagine que, em uma m√°quina, h√° um projeto Python que tem alguns pacotes de terceiros instalados e, dentre eles, h√° uma biblioteca na vers√£o 1.4. Imagine tamb√©m que, na mesma m√°quina, um novo projeto √© iniciado e ele precisa da mesma biblioteca, mas, dessa vez, na vers√£o 2.0. O que fazer? 
As vers√µes s√£o compat√≠veis? Se eu atualizar o sistema, a vers√£o antiga vai continuar a funcionar?
O venv entra como resposta √† essas perguntas! Ele √© um m√≥dulo, j√° embutido na linguagem, que serve para isolar ambientes entre projetos. Ou seja, eu consigo ter dois projetos rodando, em dois ambientes diferentes, com vers√µes diferentes de uma mesma biblioteca.
Na pr√°tica, o que vamos fazer √© instalar as bibliotecas em um diret√≥rio, que est√° relacionado ao projeto. Assim, cada projeto pode ter suas pr√≥prias bibliotecas na vers√£o que quiser. A ideia √© a mesma do npm que voc√™s j√° v√™m usando.
O comando para cria√ß√£o deste ambiente isolado √© python3 -m venv .venv , sendo que .venv √© o nome do ambiente isolado. Este comando deve ser executado na raiz do projeto.
üí° Caso o venv n√£o esteja instalado, utilize o comando sudo apt install python3-venv .
Este ambiente isolado ser√° visto como um diret√≥rio criado na raiz do projeto. O ponto na frente do nome faz com que o diret√≥rio fique oculto.
Depois de criado, temos de ativar este ambiente para us√°-lo. Isto √© importante, pois sempre que decidirmos trabalhar neste projeto devemos repetir este passo. """

# $ source .venv/bin/activate

""" Cria√ß√£o de um ambiente virtual.
Voc√™ pode conferir se o comando de ativa√ß√£o do ambiente virtual deu certo com o seguinte comando:
"""

# $ which python3

""" O resultado ser√° o caminho para a pasta onde voc√™ criou seu ambiente virtual ( pwd ), acrescido de .venv/bin/python3 .
Pronto, agora estamos preparados e preparadas para instalar as bibliotecas que precisaremos para nossos projetos.
 """

 for game in video_games:
   game["Metadata"]["Genres"].split('\n')
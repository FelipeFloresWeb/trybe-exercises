/* O que exatamente é SOLID?
A palavra solid (sólido) no contexto de programação, é um acrônimo para cinco princípios e que de fato, se aplicados de maneira conjunta e inteligente, geram solidez e durabilidade para sua arquitetura como um todo. Ele é mais focado em programação orientada a objetos (POO) , mas também é aplicável em outros cenários similares. É importante ressaltar, no entanto, que o conceito de SOLID ao pé da letra é bem complicado de ser entendido. Se definirmos todos os princípios como propostos no artigo científico escrito por Robert C. Martin, nos arriscamos a criar mais confusão do que qualquer coisa. Portanto, ensinaremos aqui uma versão de SOLID mais adequada à nossa realidade. Posteriormente no curso, no módulo de Ciência da Computação, vamos estudar SOLID novamente com mais detalhes, então não se preocupe! Dito isso, nas definições originais, SOLID significa o seguinte (se prepare para ter dúvidas):
S ingle responsibility principle ( Princípio da responsabilidade única ): uma classe deve ter apenas uma única responsabilidade;
O pen/Closed principle ( Princípio aberto/fechado ): entidades de software devem ser abertas para extensão, mas fechadas para modificação;
L iskov substitution principle ( Princípio de substituição de Liskov ): objetos em um programa devem ser substituíveis por instâncias de seus subtipos, sem alterar a funcionalidade do programa;
I nterface segregation principle ( Princípio da segregação da interface ): muitas interfaces de clientes específicas são melhores do que uma para todos os propósitos;
D ependency inversion principle ( Princípio da inversão da dependência ): deve-se depender de abstrações, não de objetos concretos.
 */